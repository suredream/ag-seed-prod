import os
import requests
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Retrieve API key and URL from environment variables
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "google/gemini-2.0-flash-001"

def build_prompt(feature_series, names, shap_vals, predictions: list) -> str:
    """
    Builds a prompt for the GenAI model to explain a prediction based on SHAP values.

    Args:
        feature_series (pd.Series): Feature values for the sample.
        names (list[str]): List of feature names.
        shap_vals (np.ndarray): SHAP values for the features.
        predictions (list[float]): List of model predictions (trait-based, residual, final).

    Returns:
        str: A prompt string for the GenAI model.
    """
    # Create a list of (feature, shap_value, feature_value) tuples
    contributions = [(name, shap_v, value) for name, shap_v, value in zip(names, shap_vals, feature_series)]
    # Sort contributions by absolute SHAP value (most important first) and take the top 5
    sorted_contrib = sorted(contributions, key=lambda x: abs(x[1]), reverse=True)[:5]

    # Format the top contributions into a string
    explanation = "\n".join([
        f"- Feature `{f}` with value `{v}` contributed {'positively' if s > 0 else 'negatively'} ({s:.3f})"
        for f, s, v in sorted_contrib
    ])

    # Construct the full prompt for the GenAI model
    prompt = f"""

You are a business analyst helping stakeholders understand why a machine learning model predicted a specific value for a seed product.

Given the model prediction and SHAP values, explain the result in clear, concise natural business language, suitable for non-technical readers in agriculture or seed product development.

Predictions:
- Trait-based model predicted {predictions[1]:.2f} units.
- Residual model (product-specific correction) added {predictions[2]:.2f} units.
- Final predicted sales: {predictions[0]:.2f} units.

Top trait drivers:

{explanation}

Replace technical feature names with intuitive business terms:

PROTECTION_SCORE: refers to the strength or robustness of the seed’s built-in protective traits (e.g., pest resistance, disease tolerance).

RELATIVE_MATURITY: indicates how early or late the seed variety matures, relative to standard benchmarks.

Your explanation should:

Describe how each feature likely influenced the model’s prediction.

Use business-relevant logic (e.g., "products with stronger protection tend to perform better").

Avoid technical jargon like “SHAP” or “baseline”.

Conclude with 1-liner insight on the sample’s value profile.

"""
    return prompt

def call_explain(prompt: str) -> str:
    """
    Calls the GenAI model to generate an explanation based on the given prompt.

    Args:
        prompt (str): The prompt to send to the GenAI model.

    Returns:
        str: The explanation generated by the GenAI model.
    """
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.5
    }
    response = requests.post(OPENROUTER_URL, headers=headers, json=data)
    response.raise_for_status()
    return response.json()['choices'][0]['message']['content'].strip()